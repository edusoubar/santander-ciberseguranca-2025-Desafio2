from cryptography.fernet import Fernet
import os

# Gera e salva uma chave de criptografia
def gerar_chave():
    chave = Fernet.generate_key()
    with open("chave.key", "wb") as chave_file:
        chave_file.write(chave)
    print("‚úÖ Chave gerada e salva como 'chave.key'.")

# Carrega a chave salva
def carregar_chave():
    try:
        return open("chave.key", "rb").read()
    except FileNotFoundError:
        print("‚ö†Ô∏è  Arquivo de chave n√£o encontrado. Gere uma chave primeiro.")
        return None

# Criptografa um arquivo de texto
def criptografar_arquivo(arquivo, chave):
    f = Fernet(chave)
    with open(arquivo, "rb") as file:
        dados = file.read()
    dados_encriptados = f.encrypt(dados)
    with open(arquivo + ".cripto", "wb") as file:
        file.write(dados_encriptados)
    print(f"üîê Arquivo '{arquivo}' criptografado como '{arquivo}.cripto'.")

# Descriptografa um arquivo .cripto e restaura o conte√∫do original
def descriptografar_arquivo(arquivo_cripto, chave):
    f = Fernet(chave)
    with open(arquivo_cripto, "rb") as file:
        dados_encriptados = file.read()
    try:
        dados_originais = f.decrypt(dados_encriptados)  # Tenta descriptografar os dados
        nome_original = arquivo_cripto.replace(".cripto", ".restaurado.txt")  # Novo nome para o arquivo restaurado
        with open(nome_original, "wb") as file:
            file.write(dados_originais)
        print(f"‚úÖ Arquivo restaurado como '{nome_original}'.")
    except Exception as e:
        print(f"‚ùå Erro ao descriptografar '{arquivo_cripto}': {e}")

# Encontra arquivos .txt no diret√≥rio
def encontrar_arquivos(diretorio, extensao=".txt"):
    lista = []
    for raiz, _, arquivos in os.walk(diretorio):
        for nome in arquivos:
            if nome.endswith(extensao):
                lista.append(os.path.join(raiz, nome))
    return lista

# Cria uma mensagem educativa
def criar_mensagem_educativa():
    with open("LEIA ISSO.txt", "w") as f:
        f.write("Este √© um exemplo educativo de criptografia de arquivos.\n")
        f.write("Nenhum dado real foi comprometido.\n")
        f.write("Use criptografia para proteger suas informa√ß√µes pessoais e profissionais.")
    print("üìÑ Mensagem educativa criada como 'LEIA ISSO.txt'.")

# Menu interativo
def menu():
    while True:
        print("\nüîß Menu do Simulador de Criptografia")
        print("1. Gerar chave de criptografia")
        print("2. Criptografar arquivos .txt")
        print("3. Descriptografar arquivos .cripto")
        print("4. Ver arquivos criptografados")
        print("5. Criar mensagem educativa")
        print("6. Sair")
        

        escolha = input("Escolha uma op√ß√£o (1-6): ")

        if escolha == "1":
            gerar_chave()
        elif escolha == "2":
            chave = carregar_chave()
            if chave:
                arquivos = encontrar_arquivos("test_files")
                if arquivos:
                    for arquivo in arquivos:
                        criptografar_arquivo(arquivo, chave)
                else:
                    print("üìÇ Nenhum arquivo .txt encontrado em 'test_files'.")
        elif escolha == "3":
            chave = carregar_chave()
            if chave:
                criptos = encontrar_arquivos("test_files", ".cripto")
                if criptos:
                    for arquivo in criptos:
                        descriptografar_arquivo(arquivo, chave)
                else:
                    print("üì≠ Nenhum arquivo .cripto encontrado para restaurar.")
        elif escolha == "4":
            criptos = encontrar_arquivos("test_files", ".cripto")  # ‚Üê agora busca arquivos .cripto diretamente
            if criptos:
                print("üìÇ Arquivo criptografado encontrado em:")
                for f in criptos:
                    print(f" üìÇ {f}")
            else:
                print("üì≠ Nenhum arquivo criptografado encontrado.")
        elif escolha == "5":
            criar_mensagem_educativa()
        elif escolha == "6":
            print("üëã Encerrando o simulador. At√© a pr√≥xima!")
            break
        else:
            print("‚ùå Op√ß√£o inv√°lida. Tente novamente.")

# Executa o menu
if __name__ == "__main__":
    menu()